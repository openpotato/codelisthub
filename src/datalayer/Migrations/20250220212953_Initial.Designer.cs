// <auto-generated />
using System;
using CodeListHub.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeListHub.DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250220212953_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeListHub.DataLayer.DocumentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<Guid>("DocumentInfoId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to DocumentInfo");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The file path");

                    b.Property<string>("MediaType")
                        .HasColumnType("text")
                        .HasComment("Media type of the file");

                    b.Property<bool>("MetaOnly")
                        .HasColumnType("boolean")
                        .HasComment("Just metadata without data?");

                    b.HasKey("Id");

                    b.HasIndex("DocumentInfoId");

                    b.ToTable("DocumentFiles", t =>
                        {
                            t.HasComment("File representations of code list documents or code list set documents");
                        });
                });

            modelBuilder.Entity("CodeListHub.DataLayer.DocumentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("CanonicalUri")
                        .HasColumnType("text")
                        .HasComment("Canonical URI which uniquely identifies all versions this document (collectively)");

                    b.Property<string>("CanonicalVersionUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Canonical URI which uniquely identifies this document");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer")
                        .HasComment("The document type");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("A short identifier of this document");

                    b.Property<string>("LongName")
                        .HasColumnType("text")
                        .HasComment("Human-readable name of this document");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The timepoint of the publication of the document.");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to publisher");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("A short identifier of this document");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The timepoint from which this document is valid.");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The timepoint until which this document is valid.");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasComment("The version of the document");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ShortName");

                    b.HasIndex("Language", "CanonicalVersionUri")
                        .IsUnique();

                    b.ToTable("DocumentInfo", t =>
                        {
                            t.HasComment("Index entries for code list documents and code list set documents");
                        });
                });

            modelBuilder.Entity("CodeListHub.DataLayer.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("LongName")
                        .HasColumnType("text")
                        .HasComment("Human-readable name for the publisher");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasComment("Short name for the publisher");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasComment("Url with further information");

                    b.HasKey("Id");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("Publishers", t =>
                        {
                            t.HasComment("Publishers responsible for publishing and/or maintaining the codes");
                        });
                });

            modelBuilder.Entity("CodeListHub.DataLayer.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasComment("The tag value.");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Tags", t =>
                        {
                            t.HasComment("Tags of documents");
                        });
                });

            modelBuilder.Entity("DocumentInfoTag", b =>
                {
                    b.Property<Guid>("DocumentInfosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentInfosId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("DocumentInfoTags", null, t =>
                        {
                            t.HasComment("Join table between DocumentInfo and Tags");
                        });
                });

            modelBuilder.Entity("CodeListHub.DataLayer.DocumentFile", b =>
                {
                    b.HasOne("CodeListHub.DataLayer.DocumentInfo", null)
                        .WithMany("Files")
                        .HasForeignKey("DocumentInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeListHub.DataLayer.DocumentInfo", b =>
                {
                    b.HasOne("CodeListHub.DataLayer.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("CodeListHub.DataLayer.Publisher", b =>
                {
                    b.OwnsOne("CodeListHub.DataLayer.Identifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("PublisherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasComment("The identifier value.");

                            b1.HasKey("PublisherId");

                            b1.ToTable("Publishers");

                            b1.WithOwner()
                                .HasForeignKey("PublisherId");

                            b1.OwnsOne("CodeListHub.DataLayer.IdentifierSource", "Source", b2 =>
                                {
                                    b2.Property<Guid>("IdentifierPublisherId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("LongName")
                                        .HasColumnType("text")
                                        .HasComment("Human-readable name for the source.");

                                    b2.Property<string>("ShortName")
                                        .HasColumnType("text")
                                        .HasComment("Short name of the source.");

                                    b2.Property<string>("Url")
                                        .HasColumnType("text")
                                        .HasComment("More information about the source.");

                                    b2.HasKey("IdentifierPublisherId");

                                    b2.ToTable("Publishers");

                                    b2.WithOwner()
                                        .HasForeignKey("IdentifierPublisherId");
                                });

                            b1.Navigation("Source")
                                .IsRequired();
                        });

                    b.Navigation("Identifier")
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentInfoTag", b =>
                {
                    b.HasOne("CodeListHub.DataLayer.DocumentInfo", null)
                        .WithMany()
                        .HasForeignKey("DocumentInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeListHub.DataLayer.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeListHub.DataLayer.DocumentInfo", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
